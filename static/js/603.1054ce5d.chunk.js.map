{"version":3,"file":"static/js/603.1054ce5d.chunk.js","mappings":"+VAEaA,EAAYC,EAAAA,QAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0BAItBC,EAAWH,EAAAA,QAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6QAYpBG,EAAaL,EAAAA,QAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gHAMvBK,EAAUP,EAAAA,QAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,iEAKpBO,EAAWT,EAAAA,QAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,4EAMnBS,EAAWX,EAAAA,QAAAA,KAAWY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,+BAItBW,EAAQb,EAAAA,QAAAA,EAAQc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,mC,SCuB7B,MApDA,WACE,IAAAa,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACc,SAAAC,IAWrB,OAXqBA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAtB,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACMV,EAAQ,CAADQ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEYC,EAAAA,EAAAA,GAAUX,GAAS,KAAD,EAEnC,OAFIO,EAAIC,EAAAI,KACRb,EAAQQ,EAAKT,MACbU,EAAAK,OAAA,SACKN,EAAKT,MAAI,OAAAU,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEhBO,QAAQC,IAAIR,EAAAM,GAAMG,SAASV,MAAM,yBAAAC,EAAAU,OAAA,GAAAZ,EAAA,mBAGtCa,MAAA,KAAAC,UAAA,EAZc,WACOjB,EAAAgB,MAAC,KAADC,UAAA,CAYtBC,CAAQrB,EACV,GAAG,CAACA,KAGFsB,EAAAA,EAAAA,KAAC5C,EAAS,CAAA6C,SACS,IAAhBzB,EAAK0B,QACJF,EAAAA,EAAAA,KAACxC,EAAQ,CAAAyC,SACNzB,EAAK2B,KAAI,SAAAC,GACR,IAAMC,EAAaD,EAAME,aAAY,kCAAAC,OACCH,EAAME,cACxCE,EACJ,OACEC,EAAAA,EAAAA,MAAA,MAAAR,SAAA,EACED,EAAAA,EAAAA,KAACtC,EAAU,CAAAuC,UACTD,EAAAA,EAAAA,KAACpC,EAAO,CAAC8C,IAAKL,EAAYM,IAAKP,EAAMQ,UAEvCZ,EAAAA,EAAAA,KAAClC,EAAQ,CAAAmC,UACRD,EAAAA,EAAAA,KAAChC,EAAQ,CAAAiC,SAAEG,EAAMQ,UAElBH,EAAAA,EAAAA,MAAC3C,EAAQ,CAAAmC,SAAA,CAAC,OAERD,EAAAA,EAAAA,KAAChC,EAAQ,CAAAiC,SAAEG,EAAMS,kBATZC,EAAAA,EAAAA,IAAO,GAapB,OAEEd,EAAAA,EAAAA,KAAC9B,EAAK,CAAA+B,SAAC,4BAOnB,C,kMC3DAc,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCACVC,EACQ,sBADRA,EAEO,SAFPA,EAGM,eAHNA,EAIO,WAJPA,EAKO,WAGN,SAAeC,IAAa,OAAAC,EAAAtB,MAAC,KAADC,UAAA,CAGhC,SAAAqB,IAAA,OAAAA,GAAArC,EAAAA,EAAAA,GAAAC,IAAAA,MAHI,SAAAC,IAAA,IAAAW,EAAA,OAAAZ,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACoB2B,EAAAA,EAAAA,IAAU,IAADR,OAAKU,EAAe,aAAAV,OAAYS,IAAW,KAAD,EAA5D,OAARrB,EAAQT,EAAAI,KAAAJ,EAAAK,OAAA,SACTI,EAASV,MAAI,wBAAAC,EAAAU,OAAA,GAAAZ,EAAA,MACnBa,MAAA,KAAAC,UAAA,CAII,SAAesB,EAAcC,GAAA,OAAAC,EAAAzB,MAAC,KAADC,UAAA,CAMnC,SAAAwB,IAAA,OAAAA,GAAAxC,EAAAA,EAAAA,GAAAC,IAAAA,MANM,SAAAwC,EAA8BC,GAAE,IAAA7B,EAAA,OAAAZ,IAAAA,MAAA,SAAA0C,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EAEd2B,EAAAA,EAAAA,IAAU,UAADR,OACpBiB,EAAE,aAAAjB,OAAYS,EAAO,oBAC/B,KAAD,EAFa,OAARrB,EAAQ8B,EAAAnC,KAAAmC,EAAAlC,OAAA,SAGPI,EAASV,MAAI,wBAAAwC,EAAA7B,OAAA,GAAA2B,EAAA,MACrB1B,MAAA,KAAAC,UAAA,CAGM,SAAe4B,EAAkBC,GAAA,OAAAC,EAAA/B,MAAC,KAADC,UAAA,CAKvC,SAAA8B,IAAA,OAAAA,GAAA9C,EAAAA,EAAAA,GAAAC,IAAAA,MALM,SAAA8C,EAAkCC,GAAK,IAAAnC,EAAA,OAAAZ,IAAAA,MAAA,SAAAgD,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACrB2B,EAAAA,EAAAA,IAAU,IAADR,OAC1BU,EAAa,aAAAV,OAAYS,EAAO,WAAAT,OAAUuB,EAAK,wCACnD,KAAD,EAFa,OAARnC,EAAQoC,EAAAzC,KAAAyC,EAAAxC,OAAA,SAGPI,EAASV,MAAI,wBAAA8C,EAAAnC,OAAA,GAAAiC,EAAA,MACrBhC,MAAA,KAAAC,UAAA,CAGM,SAAeT,EAAS2C,GAAA,OAAAC,EAAApC,MAAC,KAADC,UAAA,CAK9B,SAAAmC,IAAA,OAAAA,GAAAnD,EAAAA,EAAAA,GAAAC,IAAAA,MALM,SAAAmD,EAAyBV,GAAE,IAAA7B,EAAA,OAAAZ,IAAAA,MAAA,SAAAoD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,cAAA+C,EAAA/C,KAAA,EACT2B,EAAAA,EAAAA,IAAU,IAADR,OAC1BU,GAAcV,OAAGiB,GAAEjB,OAAGU,EAAc,aAAAV,OAAYS,EAAO,oBAC3D,KAAD,EAFa,OAARrB,EAAQwC,EAAA7C,KAAA6C,EAAA5C,OAAA,SAGPI,EAASV,MAAI,wBAAAkD,EAAAvC,OAAA,GAAAsC,EAAA,MACrBrC,MAAA,KAAAC,UAAA,CAIM,SAAesC,EAAYC,GAAA,OAAAC,EAAAzC,MAAC,KAADC,UAAA,CAKjC,SAAAwC,IAAA,OAAAA,GAAAxD,EAAAA,EAAAA,GAAAC,IAAAA,MALM,SAAAwD,EAA4Bf,GAAE,IAAA7B,EAAA,OAAAZ,IAAAA,MAAA,SAAAyD,GAAA,cAAAA,EAAArD,KAAAqD,EAAApD,MAAA,cAAAoD,EAAApD,KAAA,EACZ2B,EAAAA,EAAAA,IAAU,IAADR,OAC1BU,GAAcV,OAAGiB,GAAEjB,OAAGU,EAAc,aAAAV,OAAYS,EAAO,oBAC3D,KAAD,EAFa,OAARrB,EAAQ6C,EAAAlD,KAAAkD,EAAAjD,OAAA,SAGPI,EAASV,MAAI,wBAAAuD,EAAA5C,OAAA,GAAA2C,EAAA,MACrB1C,MAAA,KAAAC,UAAA,C,wDClDD,IAkBIgB,EAAS,WAAH,IAAI2B,EAAI3C,UAAAI,OAAA,QAAAwC,IAAA5C,UAAA,GAAAA,UAAA,GAAG,GAAE,OACrB6C,OAAOC,gBAAgB,IAAIC,WAAWJ,IAAOK,QAAO,SAACtB,EAAIuB,GAWvD,OAREvB,IAFFuB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetch.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n padding: 0px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 20px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const ImgWrapper = styled.div`\n  /* max-width: 200px; */\n  /* width: 100%; */\n  /* max-height: 300px; */\n  /* margin: 0 auto; */\n`;\nexport const CastImg = styled.img`\n  object-fit: cover;\n  width: 100%;\n  height: auto;\n`;\nexport const CastInfo = styled.p`\n  font-weight: 500;\n  margin-bottom: 8px;\n  margin-top: 8px;\n\n`;\nexport const CastName = styled.span`\n  font-weight: 500;\n`;\n\nexport const Error = styled.p`\n    text-align: center;\n`;\n","\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchCast } from '../../services/fetch';\nimport anyActor from './anyActor.jpg';\nimport { nanoid } from 'nanoid';\nimport { Container, CastList, ImgWrapper, CastImg, CastInfo, CastName, Error} from './Cast.styled';\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function addCast() {\n      if (movieId) {\n        try {\n          const data = await fetchCast(movieId);\n            setCast(data.cast);\n            // console.log(data.cast);\n          return data.cast;\n        } catch (error) {\n          console.log(error.response.data);\n        }\n      }\n    }\n    addCast(movieId);\n  }, [movieId]);\n\n  return (\n    <Container>\n      {cast.length !== 0 ? (\n        <CastList>\n          {cast.map(actor => {\n            const actorPhoto = actor.profile_path\n              ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n              : anyActor;\n            return (\n              <li key={nanoid(3)}>\n                <ImgWrapper>\n                  <CastImg src={actorPhoto} alt={actor.name} />\n                </ImgWrapper>\n                <CastInfo>\n                 <CastName>{actor.name}</CastName>\n                </CastInfo>\n                <CastInfo>\n                  as {}\n                  <CastName>{actor.character}</CastName>\n                </CastInfo>\n              </li>\n            );\n          })}\n        </CastList>\n      ) :   <Error>\n        No casting information\n          </Error>}\n     \n    \n    </Container>\n  );\n};\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst api_key = '2402629cc235e448b11efcecffc11c17';\nconst params = {\n    trending: 'trending/movie/week',\n    movieID: 'movie/',\n    search: 'search/movie',\n    credits: '/credits',\n    reviews: '/reviews'\n}\n\nexport async function fetchTrending() {\n    const response = await axios.get(`/${params.trending}?api_key=${api_key}`);\n  return response.data;\n  };\n\n\n\nexport async function fetchMovieByID(id) {\n\n  const response = await axios.get(\n    `/movie/${id}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}\n\n\nexport async function fetchMoviesByQuery(query) {\n  const response = await axios.get(\n    `/${params.search}?api_key=${api_key}&query=${query}&language=en-US&include_adult=false`\n  );\n  return response.data;\n}\n\n\nexport async function fetchCast(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.credits}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}\n\n\n\nexport async function fetchReviews(id) {\n  const response = await axios.get(\n    `/${params.movieID}${id}${params.reviews}?api_key=${api_key}&language=en-US`\n  );\n  return response.data;\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","CastList","_templateObject2","ImgWrapper","_templateObject3","CastImg","_templateObject4","CastInfo","_templateObject5","CastName","_templateObject6","Error","_templateObject7","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","useEffect","_addCast","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchCast","sent","abrupt","t0","console","log","response","stop","apply","arguments","addCast","_jsx","children","length","map","actor","actorPhoto","profile_path","concat","anyActor","_jsxs","src","alt","name","character","nanoid","axios","api_key","params","fetchTrending","_fetchTrending","fetchMovieByID","_x","_fetchMovieByID","_callee2","id","_context2","fetchMoviesByQuery","_x2","_fetchMoviesByQuery","_callee3","query","_context3","_x3","_fetchCast","_callee4","_context4","fetchReviews","_x4","_fetchReviews","_callee5","_context5","size","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}